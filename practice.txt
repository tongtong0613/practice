1.git init
	创建一个名为.git的子目录，这个子目录含有初始化的 Git 仓库中所有的必须文件。
2.git add --all
3.git commit -m "xxx"
4.git push --set-upstream origin master

git status 查看哪些文件处于什么状态
git status -s/--short 以简洁方式输出
	新添加的未跟踪文件前面有??标记，新添加到暂存区中的文件前面有A标记，修改过的文件前面有M标记。
	输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。
git add <filename> 跟踪一个文件
git add --all 跟踪所有文件
git diff 查看尚未暂存的文件更新了哪些部分
git diff --staged/--cached 比对已暂存文件与最后一次提交的文件差异
git commit -m "x" 提交更新
git commit -a -m "x" 跳过暂存阶段提交更新
git commit --amend 会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改，则只修改提交信息。
git rm <filename> 移除文件，不再跟踪
git rm --cached <filename> 移除仓库和暂存区文件，但保留本地
git mv <filename> <newname> 重命名文件
git log 查看提交历史
git log -p/--patch -n 显示n条记录，显示每次提交所引入的差异
git log --stat 显示每次提交的简略统计信息
git log --pretty=oneline 将每个提交放在一行显示
git log --pretty=format:"%h - %an, %ar : %s" 定制记录的显示格式
git log --graph 展示分支、合并历史
git log -S <function_name> 只会显示那些添加或删除了该字符串的提交
git reset HEAD <file>... 取消暂存
git checkout -- <file> 撤消之前所做的修改
git remote -v 显示需要读写远程仓库使用的Git保存的简写与其对应的URL
git remote add <shortname> <url> 添加一个新的远程Git仓库，同时指定一个方便使用的简写
git remote show <remote> 查看某一个远程仓库的更多信息
git remote rename <oldname> <newname> 修改远程仓库简写名称
git remote remove <shortname> 移除远程仓库
git fetch <remote> 访问远程仓库，从中拉取所有你还没有的数据
git pull <remote> 自动抓取后合并该远程分支到当前分支
git push <remote> <branch> 推送到远程仓库
git tag -l 列出标签
git tag -l "v1*" 列出v1开头的标签
git tag -a v1.0 -m "x" 创建附注标签
git tag v1.0 创建轻量标签
git push origin <tagname> 推送标签到仓库
git push origin --tags 推送所有标签到仓库
git tag -d <tagname> 删除本地标签
git push <remote> :refs/tags/<tagname> 删除仓库标签
git push <remote> --delete <tagname> 删除仓库标签
git config --global alias.last 'log -1 HEAD' 设置别名
git checkout -b <newbranchname> 创建新分支并切换到新分支